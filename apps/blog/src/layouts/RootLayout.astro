---
import "@/styles/panda.css";

import { When } from "@astropub/flow";
//import { ViewTransitions } from "astro:transitions";
import { Seo } from "astro-seo-meta";

import GoogleAnalytics from "@/components/GoogleAnalytics.astro";
import Footer from "@/components/ui/layout/Footer.astro";
import Header from "@/components/ui/layout/Header.astro";

import { ColorSchemeWatcher } from "@/components/qwik/ColorSchemeWatcher";

import type { MarkdownLayoutProps } from "astro";
import { css } from "@style/css";
import { flex } from "@style/patterns";
import Sidebar from "../components/ui/layout/Sidebar.astro";

type InnerProps = {
  title: string;
  description?: string;
};

type Props = Partial<MarkdownLayoutProps<InnerProps>> & InnerProps;

const metaDateYMD = new Date().toISOString().split("T")[0];

const { title, description, url } = Astro.props.frontmatter || Astro.props;
---
<html lang="ja">
<head prefix={`og: https://ogp.me/ns# article: https://ogp.me/ns/article#`}>
  <GoogleAnalytics tag="G-SWKQ6261R9" />

  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <link rel="canonical" href={new URL(url ?? "/", Astro.site).pathname} />
  <link rel="sitemap" href="/siemap-index.xml" />
  <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=yes" />
  <meta name="author" content="Wycey" />
  <meta name="date" content={metaDateYMD} />

  <meta name="generator" content={Astro.generator} />

  <Seo
    title={`${title === "Home" ? "" : `${ title } Â· `}Wycey blog`}
    description={description}
    keywords={["Wycey", "blog", "development", "programming"]}
    themeColor="#5944ba"
    colorScheme={"light dark" as unknown as "light"}
  />

  <meta property="og:site_name" content="Wycey blog" />
  <meta property="og:locale" content="ja_JP" />

  <!--<ViewTransitions />-->

  <script is:inline>
    const getDefaultTheme = () =>
      matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"

    const getActualTheme = (theme) => theme === "system" ? getDefaultTheme() : theme

    const getTheme = () => {
      if (typeof localStorage !== "undefined") {
        const theme = localStorage.getItem("theme");

        if (theme) {
          return getActualTheme(theme);
        }

        localStorage.setItem("theme", "system");

        return getDefaultTheme();
      }
    }

    const refreshTheme = () => {
      const actualTheme = getTheme();

      if (actualTheme === "light") {
        document.documentElement.classList.remove("dark");
      } else {
        document.documentElement.classList.add("dark");
      }
    }

    refreshTheme();

    document.addEventListener("astro:after-swap", refreshTheme);
  </script>

  <slot name="head" />
</head>
<body>
<main class={flex({
  direction: { base: "column-reverse", md: "row-reverse" },
})}>
  <Sidebar>
    <slot name="sidebar" />
  </Sidebar>
  <section class={css({
    flex: "1",
  })}>
    <Header />
    <section class={flex({
      direction: "column",
      pos: "relative",
      px: "4",
      h: "24",
      maxW: "900px",
      mx: "auto",
    })}>
      <slot name="title-prepend" />
      <h1 class={css({
        fontSize: "3xl",
        fontWeight: "medium",
      })} data-refresh-key="title" id="article-title">
        {title}
      </h1>
      <slot name="title-append" />
    </section>
    <When test={description}>
      <p data-refresh-key="description">{description}</p>
    </When>
    <section>
      <slot />
    </section>
  </section>
</main>
<Footer />
<ColorSchemeWatcher />
</body>
</html>
